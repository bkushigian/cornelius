# Layout of `/subjects/`

This directory contains the source code used for the evaluation. There will
eventually be three or four types of subjects, each with their own corresponding
directories.

1. `exprs/`: pure expressions with no side effects are the easiest type of
   program to reason about. There is a single Java file,
   [`exprs/Exprs.java`](exprs/Exprs.java), containing all expression programs.
   Each expression is wrapped in a return statement in a unique method. For
   instance, the first few methods in `Exprs` look like:
   ```java
   public class Exprs {
      /**
       * This method projects the first argument
       */
      public int project1(int a, int b) {
        return a + (b - b);
      }

      /**
       * This method projects the second argument
       */
      public int project2(int a, int b) {
        return (a - a) + b;
      }

      /**
       * This method returns the maximum of its arguments
       */
      public int max(int a, int b) {
        return a > b ? a : b;
      }

   }
   ```

2. `straightline/`: these programs have statements but no branching. These will
   be a subset of SIMPLE statements which allow for assignments and statement
   sequencing. SIMPLE doesn't have a return statement but rather a special
   variable `retvar` whose value is returned at the end of execution.

   It is easy to transform a straightline Java method into a straightline
   SIMPLE program: the final statement in the Java method will be a `return`
   statement, and it can be the only return statement in the method. Simply
   change the line

   ```java
       ...
       return expr;
     }
   ```

   to

   ```java
      ...
      retvar = expr;
    }
   ```

3. `ite-simple/`: loop-free SIMPLE programs, as described in [Translating Between PEGs and
   CFGs](../literature/tate_translating.pdf), have the following four statement
   types:

   - `s;s`: sequencing
   - `x := e`: assignment
   - `if {e} then {s} else {s}`: if-then-else
   - `while (e) {s}`: while loops

  We will handle the first three types of statements and use these to implement
  `Triangle`, a classic program that classifies triangles based on their side
  lengths.

4. `simple/`: if everything works perfectly then we will be able to encode full
   SIMPLE programs.

## Directory Structures
Each type of subject will have the following directory structure:

```
subject-type/
    SubjectType.java     # The source code for all the subjects
    mutants.log          # Log file generated by Major containing details of mutant generation
    mutants.xml          # Generated xml file serialzing the ASTs of the subjects and their mutants
    mutants/             # The generated mutants
        1/                   # First generated mutant (corresponds to entry 1 in mutants.log)
            Exprs.java          # The mutated subject
        2/                   # Second generated mutant
        .
        .
        .
```

### Reading `mutants.log`
Here is an excerpt from `exprs/mutants.log`:

```
1:AOR:-(int,int):%(int,int):Exprs@project1(int,int):12:b - b |==> b % b
2:AOR:-(int,int):*(int,int):Exprs@project1(int,int):12:b - b |==> b * b
3:AOR:-(int,int):+(int,int):Exprs@project1(int,int):12:b - b |==> b + b
4:AOR:-(int,int):/(int,int):Exprs@project1(int,int):12:b - b |==> b / b
                                    .
                                    .
                                    .
```

This is a CSV file: a **COLON separated file**. Here is a description of each
column:

0. **Mutant ID:** a unique id assigned to each mutant
1. **Mutation Type:** for instance, **AOR** tells us that this is an **A**rithemtic
   **O**perator **R**eplacement, where an arithmetic operator (say binary `-`),
   is being replaced (say by binary `+`)
2. **Original Node Type:** the original node type before it was mutated. In the
   above four entries, each was a binary minus operator on `int`s.
3. **Mutated Node Type:** the new node type replacing the original node type. In
   entry 1 we see that binary `-` is replaced by binary `%`.
4. **Method Name:** This tells us which method was mutated. Each of the above
   four mutants were formed from mutations of the `project1` method in `Exprs`.
5. **Line Number:** The line number of the mutated node
6. **Transformation:** a description of the mutation that took place

### `mutants.xml`
This is a loose spec for `mutants.xml` and should be adjusted as we see fit. The
basic purpose of this file is to serialize the AST (and possibly the bytecode)
of each subject and its mutants for reading by the Rust side of our program.

The basic structure should be something like:
```xml
<?xml version="1.0" encoduing="UTF-8"?>
<subjects>
  <subject>
    <sourcefile>Exprs.java</sourcefile>
    <method>project1(int,int)</method>
    <ast>...</ast>
    <mutants>
      <mutant>
        <id>1</id>
        <ast>...</ast>
      </mutant>
      <mutant>
        <id>2</id>
        <ast>...</ast>
      </mutant>
          .
          .
          .
    </mutants>
  </subject>
      .
      .
      .
</subjects>
```

